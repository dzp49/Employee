import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { VaccinationService } from './vaccination.service';
import { Vaccination } from './vaccination';

describe('VaccinationService', () => {
  let service: VaccinationService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [VaccinationService]
    });
    service = TestBed.inject(VaccinationService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('getAppointments', () => {
    it('should return a list of vaccinations', () => {
      const mockResponse: Vaccination[] = [{ Id: 1, StartTime: '12:00', EndTime: '13:00' }];

      service.getAppointments().subscribe((vaccinations) => {
        expect(vaccinations).toEqual(mockResponse);
      });

      const mockReq = httpMock.expectOne(service.apiUrl);
      expect(mockReq.request.method).toBe('GET');
      mockReq.flush({ vaccination: mockResponse });
    });
  });

  describe('addAppointment', () => {
    it('should add a vaccination', () => {
      const mockVaccination: Vaccination = { StartTime: '14:00', EndTime: '15:00' };

      service.addAppointment(mockVaccination).subscribe((vaccination) => {
        expect(vaccination).toEqual({ Id: 1, StartTime: '14:00', EndTime: '15:00' });
      });

      const mockReq = httpMock.expectOne(service.apiUrl);
      expect(mockReq.request.method).toBe('POST');
      mockReq.flush({ Id: 1, ...mockVaccination });
    });
  });

  describe('updateAppointment', () => {
    it('should update a vaccination', () => {
      const mockVaccination: Vaccination = { Id: 1, StartTime: '16:00', EndTime: '17:00' };

      service.updateAppointment(mockVaccination, 1).subscribe((vaccination) => {
        expect(vaccination).toEqual(mockVaccination);
      });

      const mockReq = httpMock.expectOne(`${service.apiUrl}/update/1`);
      expect(mockReq.request.method).toBe('PUT');
      expect(mockReq.request.body).toEqual(mockVaccination);
      mockReq.flush(mockVaccination);
    });
  });

  describe('deleteAppointment', () => {
    it('should delete a vaccination', () => {
      const mockId = 1;

      service.deleteAppointment(mockId).subscribe(() => {
        expect().nothing();
      });

      const mockReq = httpMock.expectOne(`${service.apiUrl}/delete/${mockId}`);
      expect(mockReq.request.method).toBe('DELETE');
      mockReq.flush(null);
    });
  });
});
