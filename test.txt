import { ComponentFixture, TestBed,  waitForAsync } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { VaccinationService } from './vaccination.service';
import { Vaccination } from './vaccination';
import { FormsModule, NgForm } from '@angular/forms';
import { Observable, of } from 'rxjs';
import { HttpClientTestingModule } from '@angular/common/http/testing';

describe('AppComponent', () => {
  let component: AppComponent;
  let fixture: ComponentFixture<AppComponent>;
  let vaccinationService: jasmine.SpyObj<VaccinationService>;

  beforeEach(waitForAsync(() => {
    const spy = jasmine.createSpyObj('VaccinationService', ['getAppointments', 'addAppointment', 'deleteAppointment']);

    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule,FormsModule],
      declarations: [ AppComponent ],
      providers: [
        { provide: VaccinationService, useValue: spy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(AppComponent);
    component = fixture.componentInstance;
    vaccinationService = TestBed.inject(VaccinationService) as jasmine.SpyObj<VaccinationService>;
  }));

  it('should create the app', () => {
    expect(component).toBeTruthy();
  });

  it('should retrieve appointments on init', () => {
    const appointments: Vaccination[] = [{ Id: 1, StartTime: '12:30', EndTime: '13:00' }];
    vaccinationService.getAppointments.and.returnValue(of(appointments));
    component.ngOnInit();
    expect(component.vaccinations).toEqual(appointments);
  });

  it('should add appointment', () => {
    const appointment: Vaccination = { StartTime: '12:30', EndTime: '13:00' };
    const response: Vaccination = { Id: 2, StartTime: '12:30', EndTime: '13:00' };
    vaccinationService.addAppointment.and.returnValue(of(response));
    component.addAppointment = appointment;
    component.onAddAppointment();
    expect(vaccinationService.addAppointment).toHaveBeenCalledWith(appointment);
    console.log("Testing here:"+response.StartTime);
  });

  // it('should delete appointment', () => {
  //   const appointment: Vaccination = { Id: 2, StartTime: '12:30', EndTime: '13:00' };
  //   vaccinationService.deleteAppointment.and.returnValue();
  //   spyOn(window, 'alert');
  //   component.vaccinations = [appointment];
  //   component.onDeleteAppointment(appointment.Id);
  //   expect(vaccinationService.deleteAppointment).toHaveBeenCalledWith(appointment.Id);
  //   expect(component.vaccinations).not.toContain(appointment);
  //   expect(window.alert).not.toHaveBeenCalled();
  // });
});
