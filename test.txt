import { ComponentFixture, TestBed, async } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { VaccinationService } from './vaccination.service';
import { Vaccination } from './vaccination';
import { of } from 'rxjs';

describe('AppComponent', () => {
  let component: AppComponent;
  let fixture: ComponentFixture<AppComponent>;
  let vaccinationService: jasmine.SpyObj<VaccinationService>;

  beforeEach(async(() => {
    const spy = jasmine.createSpyObj('VaccinationService', ['getAppointments', 'addAppointment', 'deleteAppointment']);

    TestBed.configureTestingModule({
      declarations: [ AppComponent ],
      providers: [
        { provide: VaccinationService, useValue: spy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(AppComponent);
    component = fixture.componentInstance;
    vaccinationService = TestBed.inject(VaccinationService) as jasmine.SpyObj<VaccinationService>;
  }));

  it('should create the app', () => {
    expect(component).toBeTruthy();
  });

  it('should retrieve appointments on init', () => {
    const appointments: Vaccination[] = [{ Id: 1, StartTime: '2023-03-24T10:00:00', EndTime: '2023-03-24T11:00:00' }];
    vaccinationService.getAppointments.and.returnValue(of(appointments));
    component.ngOnInit();
    expect(component.vaccinations).toEqual(appointments);
  });

  it('should add appointment', () => {
    const appointment: Vaccination = { StartTime: '2023-03-24T12:00:00', EndTime: '2023-03-24T13:00:00' };
    const response: Vaccination = { Id: 2, StartTime: '2023-03-24T12:00:00', EndTime: '2023-03-24T13:00:00' };
    vaccinationService.addAppointment.and.returnValue(of(response));
    component.addAppointment = appointment;
    component.onAddAppointment();
    expect(vaccinationService.addAppointment).toHaveBeenCalledWith(appointment);
    expect(component.vaccinations).toContain(response);
  });

  it('should delete appointment', () => {
    const appointment: Vaccination = { Id: 1, StartTime: '2023-03-24T10:00:00', EndTime: '2023-03-24T11:00:00' };
    vaccinationService.deleteAppointment.and.returnValue(of(null));
    spyOn(window, 'alert');
    component.vaccinations = [appointment];
    component.onDeleteAppointment(appointment.Id);
    expect(vaccinationService.deleteAppointment).toHaveBeenCalledWith(appointment.Id);
    expect(component.vaccinations).not.toContain(appointment);
    expect(window.alert).not.toHaveBeenCalled();
  });
});
